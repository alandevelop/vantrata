// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Availability is an object representing the database table.
type Availability struct {
	ID        string             `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID string             `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Localdate time.Time          `boil:"localdate" json:"localdate" toml:"localdate" yaml:"localdate"`
	Status    AvailabilityStatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	Vacancies int                `boil:"vacancies" json:"vacancies" toml:"vacancies" yaml:"vacancies"`
	Available bool               `boil:"available" json:"available" toml:"available" yaml:"available"`

	R *availabilityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L availabilityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AvailabilityColumns = struct {
	ID        string
	ProductID string
	Localdate string
	Status    string
	Vacancies string
	Available string
}{
	ID:        "id",
	ProductID: "product_id",
	Localdate: "localdate",
	Status:    "status",
	Vacancies: "vacancies",
	Available: "available",
}

var AvailabilityTableColumns = struct {
	ID        string
	ProductID string
	Localdate string
	Status    string
	Vacancies string
	Available string
}{
	ID:        "availability.id",
	ProductID: "availability.product_id",
	Localdate: "availability.localdate",
	Status:    "availability.status",
	Vacancies: "availability.vacancies",
	Available: "availability.available",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperAvailabilityStatus struct{ field string }

func (w whereHelperAvailabilityStatus) EQ(x AvailabilityStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperAvailabilityStatus) NEQ(x AvailabilityStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperAvailabilityStatus) LT(x AvailabilityStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperAvailabilityStatus) LTE(x AvailabilityStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperAvailabilityStatus) GT(x AvailabilityStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperAvailabilityStatus) GTE(x AvailabilityStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperAvailabilityStatus) IN(slice []AvailabilityStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperAvailabilityStatus) NIN(slice []AvailabilityStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AvailabilityWhere = struct {
	ID        whereHelperstring
	ProductID whereHelperstring
	Localdate whereHelpertime_Time
	Status    whereHelperAvailabilityStatus
	Vacancies whereHelperint
	Available whereHelperbool
}{
	ID:        whereHelperstring{field: "\"availability\".\"id\""},
	ProductID: whereHelperstring{field: "\"availability\".\"product_id\""},
	Localdate: whereHelpertime_Time{field: "\"availability\".\"localdate\""},
	Status:    whereHelperAvailabilityStatus{field: "\"availability\".\"status\""},
	Vacancies: whereHelperint{field: "\"availability\".\"vacancies\""},
	Available: whereHelperbool{field: "\"availability\".\"available\""},
}

// AvailabilityRels is where relationship names are stored.
var AvailabilityRels = struct {
	Product  string
	Bookings string
}{
	Product:  "Product",
	Bookings: "Bookings",
}

// availabilityR is where relationships are stored.
type availabilityR struct {
	Product  *Product     `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Bookings BookingSlice `boil:"Bookings" json:"Bookings" toml:"Bookings" yaml:"Bookings"`
}

// NewStruct creates a new relationship struct
func (*availabilityR) NewStruct() *availabilityR {
	return &availabilityR{}
}

func (r *availabilityR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *availabilityR) GetBookings() BookingSlice {
	if r == nil {
		return nil
	}
	return r.Bookings
}

// availabilityL is where Load methods for each relationship are stored.
type availabilityL struct{}

var (
	availabilityAllColumns            = []string{"id", "product_id", "localdate", "status", "vacancies", "available"}
	availabilityColumnsWithoutDefault = []string{"id", "product_id", "localdate", "status", "vacancies", "available"}
	availabilityColumnsWithDefault    = []string{}
	availabilityPrimaryKeyColumns     = []string{"id"}
	availabilityGeneratedColumns      = []string{}
)

type (
	// AvailabilitySlice is an alias for a slice of pointers to Availability.
	// This should almost always be used instead of []Availability.
	AvailabilitySlice []*Availability
	// AvailabilityHook is the signature for custom Availability hook methods
	AvailabilityHook func(context.Context, boil.ContextExecutor, *Availability) error

	availabilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	availabilityType                 = reflect.TypeOf(&Availability{})
	availabilityMapping              = queries.MakeStructMapping(availabilityType)
	availabilityPrimaryKeyMapping, _ = queries.BindMapping(availabilityType, availabilityMapping, availabilityPrimaryKeyColumns)
	availabilityInsertCacheMut       sync.RWMutex
	availabilityInsertCache          = make(map[string]insertCache)
	availabilityUpdateCacheMut       sync.RWMutex
	availabilityUpdateCache          = make(map[string]updateCache)
	availabilityUpsertCacheMut       sync.RWMutex
	availabilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var availabilityAfterSelectMu sync.Mutex
var availabilityAfterSelectHooks []AvailabilityHook

var availabilityBeforeInsertMu sync.Mutex
var availabilityBeforeInsertHooks []AvailabilityHook
var availabilityAfterInsertMu sync.Mutex
var availabilityAfterInsertHooks []AvailabilityHook

var availabilityBeforeUpdateMu sync.Mutex
var availabilityBeforeUpdateHooks []AvailabilityHook
var availabilityAfterUpdateMu sync.Mutex
var availabilityAfterUpdateHooks []AvailabilityHook

var availabilityBeforeDeleteMu sync.Mutex
var availabilityBeforeDeleteHooks []AvailabilityHook
var availabilityAfterDeleteMu sync.Mutex
var availabilityAfterDeleteHooks []AvailabilityHook

var availabilityBeforeUpsertMu sync.Mutex
var availabilityBeforeUpsertHooks []AvailabilityHook
var availabilityAfterUpsertMu sync.Mutex
var availabilityAfterUpsertHooks []AvailabilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Availability) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Availability) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Availability) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Availability) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Availability) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Availability) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Availability) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Availability) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Availability) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availabilityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAvailabilityHook registers your hook function for all future operations.
func AddAvailabilityHook(hookPoint boil.HookPoint, availabilityHook AvailabilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		availabilityAfterSelectMu.Lock()
		availabilityAfterSelectHooks = append(availabilityAfterSelectHooks, availabilityHook)
		availabilityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		availabilityBeforeInsertMu.Lock()
		availabilityBeforeInsertHooks = append(availabilityBeforeInsertHooks, availabilityHook)
		availabilityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		availabilityAfterInsertMu.Lock()
		availabilityAfterInsertHooks = append(availabilityAfterInsertHooks, availabilityHook)
		availabilityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		availabilityBeforeUpdateMu.Lock()
		availabilityBeforeUpdateHooks = append(availabilityBeforeUpdateHooks, availabilityHook)
		availabilityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		availabilityAfterUpdateMu.Lock()
		availabilityAfterUpdateHooks = append(availabilityAfterUpdateHooks, availabilityHook)
		availabilityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		availabilityBeforeDeleteMu.Lock()
		availabilityBeforeDeleteHooks = append(availabilityBeforeDeleteHooks, availabilityHook)
		availabilityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		availabilityAfterDeleteMu.Lock()
		availabilityAfterDeleteHooks = append(availabilityAfterDeleteHooks, availabilityHook)
		availabilityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		availabilityBeforeUpsertMu.Lock()
		availabilityBeforeUpsertHooks = append(availabilityBeforeUpsertHooks, availabilityHook)
		availabilityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		availabilityAfterUpsertMu.Lock()
		availabilityAfterUpsertHooks = append(availabilityAfterUpsertHooks, availabilityHook)
		availabilityAfterUpsertMu.Unlock()
	}
}

// One returns a single availability record from the query.
func (q availabilityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Availability, error) {
	o := &Availability{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for availability")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Availability records from the query.
func (q availabilityQuery) All(ctx context.Context, exec boil.ContextExecutor) (AvailabilitySlice, error) {
	var o []*Availability

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Availability slice")
	}

	if len(availabilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Availability records in the query.
func (q availabilityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count availability rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q availabilityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if availability exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *Availability) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// Bookings retrieves all the booking's Bookings with an executor.
func (o *Availability) Bookings(mods ...qm.QueryMod) bookingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"booking\".\"availability_id\"=?", o.ID),
	)

	return Bookings(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (availabilityL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAvailability interface{}, mods queries.Applicator) error {
	var slice []*Availability
	var object *Availability

	if singular {
		var ok bool
		object, ok = maybeAvailability.(*Availability)
		if !ok {
			object = new(Availability)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAvailability)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAvailability))
			}
		}
	} else {
		s, ok := maybeAvailability.(*[]*Availability)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAvailability)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAvailability))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &availabilityR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &availabilityR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product`),
		qm.WhereIn(`product.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.Availabilities = append(foreign.R.Availabilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Availabilities = append(foreign.R.Availabilities, local)
				break
			}
		}
	}

	return nil
}

// LoadBookings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (availabilityL) LoadBookings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAvailability interface{}, mods queries.Applicator) error {
	var slice []*Availability
	var object *Availability

	if singular {
		var ok bool
		object, ok = maybeAvailability.(*Availability)
		if !ok {
			object = new(Availability)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAvailability)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAvailability))
			}
		}
	} else {
		s, ok := maybeAvailability.(*[]*Availability)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAvailability)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAvailability))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &availabilityR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &availabilityR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`booking`),
		qm.WhereIn(`booking.availability_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load booking")
	}

	var resultSlice []*Booking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice booking")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on booking")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for booking")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookingR{}
			}
			foreign.R.Availability = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AvailabilityID {
				local.R.Bookings = append(local.R.Bookings, foreign)
				if foreign.R == nil {
					foreign.R = &bookingR{}
				}
				foreign.R.Availability = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the availability to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.Availabilities.
func (o *Availability) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"availability\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, availabilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &availabilityR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			Availabilities: AvailabilitySlice{o},
		}
	} else {
		related.R.Availabilities = append(related.R.Availabilities, o)
	}

	return nil
}

// AddBookings adds the given related objects to the existing relationships
// of the availability, optionally inserting them as new records.
// Appends related to o.R.Bookings.
// Sets related.R.Availability appropriately.
func (o *Availability) AddBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Booking) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AvailabilityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"booking\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"availability_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AvailabilityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &availabilityR{
			Bookings: related,
		}
	} else {
		o.R.Bookings = append(o.R.Bookings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookingR{
				Availability: o,
			}
		} else {
			rel.R.Availability = o
		}
	}
	return nil
}

// Availabilities retrieves all the records using an executor.
func Availabilities(mods ...qm.QueryMod) availabilityQuery {
	mods = append(mods, qm.From("\"availability\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"availability\".*"})
	}

	return availabilityQuery{q}
}

// FindAvailability retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAvailability(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Availability, error) {
	availabilityObj := &Availability{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"availability\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, availabilityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from availability")
	}

	if err = availabilityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return availabilityObj, err
	}

	return availabilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Availability) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no availability provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(availabilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	availabilityInsertCacheMut.RLock()
	cache, cached := availabilityInsertCache[key]
	availabilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			availabilityAllColumns,
			availabilityColumnsWithDefault,
			availabilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(availabilityType, availabilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(availabilityType, availabilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"availability\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"availability\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into availability")
	}

	if !cached {
		availabilityInsertCacheMut.Lock()
		availabilityInsertCache[key] = cache
		availabilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Availability.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Availability) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	availabilityUpdateCacheMut.RLock()
	cache, cached := availabilityUpdateCache[key]
	availabilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			availabilityAllColumns,
			availabilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update availability, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"availability\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, availabilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(availabilityType, availabilityMapping, append(wl, availabilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update availability row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for availability")
	}

	if !cached {
		availabilityUpdateCacheMut.Lock()
		availabilityUpdateCache[key] = cache
		availabilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q availabilityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for availability")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for availability")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AvailabilitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"availability\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, availabilityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in availability slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all availability")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Availability) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no availability provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(availabilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	availabilityUpsertCacheMut.RLock()
	cache, cached := availabilityUpsertCache[key]
	availabilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			availabilityAllColumns,
			availabilityColumnsWithDefault,
			availabilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			availabilityAllColumns,
			availabilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert availability, could not build update column list")
		}

		ret := strmangle.SetComplement(availabilityAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(availabilityPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert availability, could not build conflict column list")
			}

			conflict = make([]string, len(availabilityPrimaryKeyColumns))
			copy(conflict, availabilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"availability\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(availabilityType, availabilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(availabilityType, availabilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert availability")
	}

	if !cached {
		availabilityUpsertCacheMut.Lock()
		availabilityUpsertCache[key] = cache
		availabilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Availability record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Availability) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Availability provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), availabilityPrimaryKeyMapping)
	sql := "DELETE FROM \"availability\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from availability")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for availability")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q availabilityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no availabilityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from availability")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for availability")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AvailabilitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(availabilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"availability\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, availabilityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from availability slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for availability")
	}

	if len(availabilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Availability) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAvailability(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AvailabilitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AvailabilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"availability\".* FROM \"availability\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, availabilityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AvailabilitySlice")
	}

	*o = slice

	return nil
}

// AvailabilityExists checks if the Availability row exists.
func AvailabilityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"availability\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if availability exists")
	}

	return exists, nil
}

// Exists checks if the Availability row exists.
func (o *Availability) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AvailabilityExists(ctx, exec, o.ID)
}
