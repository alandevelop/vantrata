// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type AvailabilityStatus string

// Enum values for AvailabilityStatus
const (
	AvailabilityStatusAVAILABLE AvailabilityStatus = "AVAILABLE"
	AvailabilityStatusSOLD_OUT  AvailabilityStatus = "SOLD_OUT"
)

func AllAvailabilityStatus() []AvailabilityStatus {
	return []AvailabilityStatus{
		AvailabilityStatusAVAILABLE,
		AvailabilityStatusSOLD_OUT,
	}
}

func (e AvailabilityStatus) IsValid() error {
	switch e {
	case AvailabilityStatusAVAILABLE, AvailabilityStatusSOLD_OUT:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e AvailabilityStatus) String() string {
	return string(e)
}

func (e AvailabilityStatus) Ordinal() int {
	switch e {
	case AvailabilityStatusAVAILABLE:
		return 0
	case AvailabilityStatusSOLD_OUT:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type BookingStatus string

// Enum values for BookingStatus
const (
	BookingStatusRESERVED  BookingStatus = "RESERVED"
	BookingStatusCONFIRMED BookingStatus = "CONFIRMED"
)

func AllBookingStatus() []BookingStatus {
	return []BookingStatus{
		BookingStatusRESERVED,
		BookingStatusCONFIRMED,
	}
}

func (e BookingStatus) IsValid() error {
	switch e {
	case BookingStatusRESERVED, BookingStatusCONFIRMED:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e BookingStatus) String() string {
	return string(e)
}

func (e BookingStatus) Ordinal() int {
	switch e {
	case BookingStatusRESERVED:
		return 0
	case BookingStatusCONFIRMED:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}
