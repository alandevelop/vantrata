// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BookingUnit is an object representing the database table.
type BookingUnit struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BookingID string      `boil:"booking_id" json:"booking_id" toml:"booking_id" yaml:"booking_id"`
	Ticket    null.String `boil:"ticket" json:"ticket,omitempty" toml:"ticket" yaml:"ticket,omitempty"`

	R *bookingUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookingUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookingUnitColumns = struct {
	ID        string
	BookingID string
	Ticket    string
}{
	ID:        "id",
	BookingID: "booking_id",
	Ticket:    "ticket",
}

var BookingUnitTableColumns = struct {
	ID        string
	BookingID string
	Ticket    string
}{
	ID:        "booking_unit.id",
	BookingID: "booking_unit.booking_id",
	Ticket:    "booking_unit.ticket",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BookingUnitWhere = struct {
	ID        whereHelperstring
	BookingID whereHelperstring
	Ticket    whereHelpernull_String
}{
	ID:        whereHelperstring{field: "\"booking_unit\".\"id\""},
	BookingID: whereHelperstring{field: "\"booking_unit\".\"booking_id\""},
	Ticket:    whereHelpernull_String{field: "\"booking_unit\".\"ticket\""},
}

// BookingUnitRels is where relationship names are stored.
var BookingUnitRels = struct {
	Booking string
}{
	Booking: "Booking",
}

// bookingUnitR is where relationships are stored.
type bookingUnitR struct {
	Booking *Booking `boil:"Booking" json:"Booking" toml:"Booking" yaml:"Booking"`
}

// NewStruct creates a new relationship struct
func (*bookingUnitR) NewStruct() *bookingUnitR {
	return &bookingUnitR{}
}

func (r *bookingUnitR) GetBooking() *Booking {
	if r == nil {
		return nil
	}
	return r.Booking
}

// bookingUnitL is where Load methods for each relationship are stored.
type bookingUnitL struct{}

var (
	bookingUnitAllColumns            = []string{"id", "booking_id", "ticket"}
	bookingUnitColumnsWithoutDefault = []string{"id", "booking_id"}
	bookingUnitColumnsWithDefault    = []string{"ticket"}
	bookingUnitPrimaryKeyColumns     = []string{"id"}
	bookingUnitGeneratedColumns      = []string{}
)

type (
	// BookingUnitSlice is an alias for a slice of pointers to BookingUnit.
	// This should almost always be used instead of []BookingUnit.
	BookingUnitSlice []*BookingUnit
	// BookingUnitHook is the signature for custom BookingUnit hook methods
	BookingUnitHook func(context.Context, boil.ContextExecutor, *BookingUnit) error

	bookingUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookingUnitType                 = reflect.TypeOf(&BookingUnit{})
	bookingUnitMapping              = queries.MakeStructMapping(bookingUnitType)
	bookingUnitPrimaryKeyMapping, _ = queries.BindMapping(bookingUnitType, bookingUnitMapping, bookingUnitPrimaryKeyColumns)
	bookingUnitInsertCacheMut       sync.RWMutex
	bookingUnitInsertCache          = make(map[string]insertCache)
	bookingUnitUpdateCacheMut       sync.RWMutex
	bookingUnitUpdateCache          = make(map[string]updateCache)
	bookingUnitUpsertCacheMut       sync.RWMutex
	bookingUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookingUnitAfterSelectMu sync.Mutex
var bookingUnitAfterSelectHooks []BookingUnitHook

var bookingUnitBeforeInsertMu sync.Mutex
var bookingUnitBeforeInsertHooks []BookingUnitHook
var bookingUnitAfterInsertMu sync.Mutex
var bookingUnitAfterInsertHooks []BookingUnitHook

var bookingUnitBeforeUpdateMu sync.Mutex
var bookingUnitBeforeUpdateHooks []BookingUnitHook
var bookingUnitAfterUpdateMu sync.Mutex
var bookingUnitAfterUpdateHooks []BookingUnitHook

var bookingUnitBeforeDeleteMu sync.Mutex
var bookingUnitBeforeDeleteHooks []BookingUnitHook
var bookingUnitAfterDeleteMu sync.Mutex
var bookingUnitAfterDeleteHooks []BookingUnitHook

var bookingUnitBeforeUpsertMu sync.Mutex
var bookingUnitBeforeUpsertHooks []BookingUnitHook
var bookingUnitAfterUpsertMu sync.Mutex
var bookingUnitAfterUpsertHooks []BookingUnitHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookingUnit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookingUnit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookingUnit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookingUnit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookingUnit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookingUnit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookingUnit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookingUnit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookingUnit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingUnitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookingUnitHook registers your hook function for all future operations.
func AddBookingUnitHook(hookPoint boil.HookPoint, bookingUnitHook BookingUnitHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookingUnitAfterSelectMu.Lock()
		bookingUnitAfterSelectHooks = append(bookingUnitAfterSelectHooks, bookingUnitHook)
		bookingUnitAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bookingUnitBeforeInsertMu.Lock()
		bookingUnitBeforeInsertHooks = append(bookingUnitBeforeInsertHooks, bookingUnitHook)
		bookingUnitBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bookingUnitAfterInsertMu.Lock()
		bookingUnitAfterInsertHooks = append(bookingUnitAfterInsertHooks, bookingUnitHook)
		bookingUnitAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bookingUnitBeforeUpdateMu.Lock()
		bookingUnitBeforeUpdateHooks = append(bookingUnitBeforeUpdateHooks, bookingUnitHook)
		bookingUnitBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bookingUnitAfterUpdateMu.Lock()
		bookingUnitAfterUpdateHooks = append(bookingUnitAfterUpdateHooks, bookingUnitHook)
		bookingUnitAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bookingUnitBeforeDeleteMu.Lock()
		bookingUnitBeforeDeleteHooks = append(bookingUnitBeforeDeleteHooks, bookingUnitHook)
		bookingUnitBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bookingUnitAfterDeleteMu.Lock()
		bookingUnitAfterDeleteHooks = append(bookingUnitAfterDeleteHooks, bookingUnitHook)
		bookingUnitAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bookingUnitBeforeUpsertMu.Lock()
		bookingUnitBeforeUpsertHooks = append(bookingUnitBeforeUpsertHooks, bookingUnitHook)
		bookingUnitBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bookingUnitAfterUpsertMu.Lock()
		bookingUnitAfterUpsertHooks = append(bookingUnitAfterUpsertHooks, bookingUnitHook)
		bookingUnitAfterUpsertMu.Unlock()
	}
}

// One returns a single bookingUnit record from the query.
func (q bookingUnitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookingUnit, error) {
	o := &BookingUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for booking_unit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BookingUnit records from the query.
func (q bookingUnitQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookingUnitSlice, error) {
	var o []*BookingUnit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BookingUnit slice")
	}

	if len(bookingUnitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BookingUnit records in the query.
func (q bookingUnitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count booking_unit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookingUnitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if booking_unit exists")
	}

	return count > 0, nil
}

// Booking pointed to by the foreign key.
func (o *BookingUnit) Booking(mods ...qm.QueryMod) bookingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BookingID),
	}

	queryMods = append(queryMods, mods...)

	return Bookings(queryMods...)
}

// LoadBooking allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookingUnitL) LoadBooking(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookingUnit interface{}, mods queries.Applicator) error {
	var slice []*BookingUnit
	var object *BookingUnit

	if singular {
		var ok bool
		object, ok = maybeBookingUnit.(*BookingUnit)
		if !ok {
			object = new(BookingUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBookingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBookingUnit))
			}
		}
	} else {
		s, ok := maybeBookingUnit.(*[]*BookingUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBookingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBookingUnit))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingUnitR{}
		}
		args[object.BookingID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingUnitR{}
			}

			args[obj.BookingID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`booking`),
		qm.WhereIn(`booking.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Booking")
	}

	var resultSlice []*Booking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Booking")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for booking")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for booking")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Booking = foreign
		if foreign.R == nil {
			foreign.R = &bookingR{}
		}
		foreign.R.BookingUnits = append(foreign.R.BookingUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookingID == foreign.ID {
				local.R.Booking = foreign
				if foreign.R == nil {
					foreign.R = &bookingR{}
				}
				foreign.R.BookingUnits = append(foreign.R.BookingUnits, local)
				break
			}
		}
	}

	return nil
}

// SetBooking of the bookingUnit to the related item.
// Sets o.R.Booking to related.
// Adds o to related.R.BookingUnits.
func (o *BookingUnit) SetBooking(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Booking) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booking_unit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"booking_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookingUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookingID = related.ID
	if o.R == nil {
		o.R = &bookingUnitR{
			Booking: related,
		}
	} else {
		o.R.Booking = related
	}

	if related.R == nil {
		related.R = &bookingR{
			BookingUnits: BookingUnitSlice{o},
		}
	} else {
		related.R.BookingUnits = append(related.R.BookingUnits, o)
	}

	return nil
}

// BookingUnits retrieves all the records using an executor.
func BookingUnits(mods ...qm.QueryMod) bookingUnitQuery {
	mods = append(mods, qm.From("\"booking_unit\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"booking_unit\".*"})
	}

	return bookingUnitQuery{q}
}

// FindBookingUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookingUnit(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BookingUnit, error) {
	bookingUnitObj := &BookingUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"booking_unit\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bookingUnitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from booking_unit")
	}

	if err = bookingUnitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookingUnitObj, err
	}

	return bookingUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookingUnit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no booking_unit provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookingUnitInsertCacheMut.RLock()
	cache, cached := bookingUnitInsertCache[key]
	bookingUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookingUnitAllColumns,
			bookingUnitColumnsWithDefault,
			bookingUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookingUnitType, bookingUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookingUnitType, bookingUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"booking_unit\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"booking_unit\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into booking_unit")
	}

	if !cached {
		bookingUnitInsertCacheMut.Lock()
		bookingUnitInsertCache[key] = cache
		bookingUnitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BookingUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookingUnit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookingUnitUpdateCacheMut.RLock()
	cache, cached := bookingUnitUpdateCache[key]
	bookingUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookingUnitAllColumns,
			bookingUnitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update booking_unit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"booking_unit\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookingUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookingUnitType, bookingUnitMapping, append(wl, bookingUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update booking_unit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for booking_unit")
	}

	if !cached {
		bookingUnitUpdateCacheMut.Lock()
		bookingUnitUpdateCache[key] = cache
		bookingUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookingUnitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for booking_unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for booking_unit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookingUnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"booking_unit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookingUnitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookingUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookingUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookingUnit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no booking_unit provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookingUnitUpsertCacheMut.RLock()
	cache, cached := bookingUnitUpsertCache[key]
	bookingUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bookingUnitAllColumns,
			bookingUnitColumnsWithDefault,
			bookingUnitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookingUnitAllColumns,
			bookingUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert booking_unit, could not build update column list")
		}

		ret := strmangle.SetComplement(bookingUnitAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bookingUnitPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert booking_unit, could not build conflict column list")
			}

			conflict = make([]string, len(bookingUnitPrimaryKeyColumns))
			copy(conflict, bookingUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"booking_unit\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bookingUnitType, bookingUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookingUnitType, bookingUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert booking_unit")
	}

	if !cached {
		bookingUnitUpsertCacheMut.Lock()
		bookingUnitUpsertCache[key] = cache
		bookingUnitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BookingUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookingUnit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookingUnit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookingUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"booking_unit\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from booking_unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for booking_unit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookingUnitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookingUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booking_unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for booking_unit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookingUnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookingUnitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"booking_unit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingUnitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookingUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for booking_unit")
	}

	if len(bookingUnitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookingUnit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookingUnit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingUnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookingUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"booking_unit\".* FROM \"booking_unit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookingUnitSlice")
	}

	*o = slice

	return nil
}

// BookingUnitExists checks if the BookingUnit row exists.
func BookingUnitExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"booking_unit\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if booking_unit exists")
	}

	return exists, nil
}

// Exists checks if the BookingUnit row exists.
func (o *BookingUnit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookingUnitExists(ctx, exec, o.ID)
}
