// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Booking is an object representing the database table.
type Booking struct {
	ID             string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID      string        `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	AvailabilityID string        `boil:"availability_id" json:"availability_id" toml:"availability_id" yaml:"availability_id"`
	Status         BookingStatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	Price          int           `boil:"price" json:"price" toml:"price" yaml:"price"`
	CurrencyID     string        `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`

	R *bookingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookingColumns = struct {
	ID             string
	ProductID      string
	AvailabilityID string
	Status         string
	Price          string
	CurrencyID     string
}{
	ID:             "id",
	ProductID:      "product_id",
	AvailabilityID: "availability_id",
	Status:         "status",
	Price:          "price",
	CurrencyID:     "currency_id",
}

var BookingTableColumns = struct {
	ID             string
	ProductID      string
	AvailabilityID string
	Status         string
	Price          string
	CurrencyID     string
}{
	ID:             "booking.id",
	ProductID:      "booking.product_id",
	AvailabilityID: "booking.availability_id",
	Status:         "booking.status",
	Price:          "booking.price",
	CurrencyID:     "booking.currency_id",
}

// Generated where

type whereHelperBookingStatus struct{ field string }

func (w whereHelperBookingStatus) EQ(x BookingStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperBookingStatus) NEQ(x BookingStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperBookingStatus) LT(x BookingStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperBookingStatus) LTE(x BookingStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperBookingStatus) GT(x BookingStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperBookingStatus) GTE(x BookingStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperBookingStatus) IN(slice []BookingStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperBookingStatus) NIN(slice []BookingStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BookingWhere = struct {
	ID             whereHelperstring
	ProductID      whereHelperstring
	AvailabilityID whereHelperstring
	Status         whereHelperBookingStatus
	Price          whereHelperint
	CurrencyID     whereHelperstring
}{
	ID:             whereHelperstring{field: "\"booking\".\"id\""},
	ProductID:      whereHelperstring{field: "\"booking\".\"product_id\""},
	AvailabilityID: whereHelperstring{field: "\"booking\".\"availability_id\""},
	Status:         whereHelperBookingStatus{field: "\"booking\".\"status\""},
	Price:          whereHelperint{field: "\"booking\".\"price\""},
	CurrencyID:     whereHelperstring{field: "\"booking\".\"currency_id\""},
}

// BookingRels is where relationship names are stored.
var BookingRels = struct {
	Availability string
	Currency     string
	Product      string
	BookingUnits string
}{
	Availability: "Availability",
	Currency:     "Currency",
	Product:      "Product",
	BookingUnits: "BookingUnits",
}

// bookingR is where relationships are stored.
type bookingR struct {
	Availability *Availability    `boil:"Availability" json:"Availability" toml:"Availability" yaml:"Availability"`
	Currency     *Currency        `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	Product      *Product         `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BookingUnits BookingUnitSlice `boil:"BookingUnits" json:"BookingUnits" toml:"BookingUnits" yaml:"BookingUnits"`
}

// NewStruct creates a new relationship struct
func (*bookingR) NewStruct() *bookingR {
	return &bookingR{}
}

func (r *bookingR) GetAvailability() *Availability {
	if r == nil {
		return nil
	}
	return r.Availability
}

func (r *bookingR) GetCurrency() *Currency {
	if r == nil {
		return nil
	}
	return r.Currency
}

func (r *bookingR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *bookingR) GetBookingUnits() BookingUnitSlice {
	if r == nil {
		return nil
	}
	return r.BookingUnits
}

// bookingL is where Load methods for each relationship are stored.
type bookingL struct{}

var (
	bookingAllColumns            = []string{"id", "product_id", "availability_id", "status", "price", "currency_id"}
	bookingColumnsWithoutDefault = []string{"id", "product_id", "availability_id", "status", "price", "currency_id"}
	bookingColumnsWithDefault    = []string{}
	bookingPrimaryKeyColumns     = []string{"id"}
	bookingGeneratedColumns      = []string{}
)

type (
	// BookingSlice is an alias for a slice of pointers to Booking.
	// This should almost always be used instead of []Booking.
	BookingSlice []*Booking
	// BookingHook is the signature for custom Booking hook methods
	BookingHook func(context.Context, boil.ContextExecutor, *Booking) error

	bookingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookingType                 = reflect.TypeOf(&Booking{})
	bookingMapping              = queries.MakeStructMapping(bookingType)
	bookingPrimaryKeyMapping, _ = queries.BindMapping(bookingType, bookingMapping, bookingPrimaryKeyColumns)
	bookingInsertCacheMut       sync.RWMutex
	bookingInsertCache          = make(map[string]insertCache)
	bookingUpdateCacheMut       sync.RWMutex
	bookingUpdateCache          = make(map[string]updateCache)
	bookingUpsertCacheMut       sync.RWMutex
	bookingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookingAfterSelectMu sync.Mutex
var bookingAfterSelectHooks []BookingHook

var bookingBeforeInsertMu sync.Mutex
var bookingBeforeInsertHooks []BookingHook
var bookingAfterInsertMu sync.Mutex
var bookingAfterInsertHooks []BookingHook

var bookingBeforeUpdateMu sync.Mutex
var bookingBeforeUpdateHooks []BookingHook
var bookingAfterUpdateMu sync.Mutex
var bookingAfterUpdateHooks []BookingHook

var bookingBeforeDeleteMu sync.Mutex
var bookingBeforeDeleteHooks []BookingHook
var bookingAfterDeleteMu sync.Mutex
var bookingAfterDeleteHooks []BookingHook

var bookingBeforeUpsertMu sync.Mutex
var bookingBeforeUpsertHooks []BookingHook
var bookingAfterUpsertMu sync.Mutex
var bookingAfterUpsertHooks []BookingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Booking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Booking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Booking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Booking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Booking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Booking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Booking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Booking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Booking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookingHook registers your hook function for all future operations.
func AddBookingHook(hookPoint boil.HookPoint, bookingHook BookingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookingAfterSelectMu.Lock()
		bookingAfterSelectHooks = append(bookingAfterSelectHooks, bookingHook)
		bookingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bookingBeforeInsertMu.Lock()
		bookingBeforeInsertHooks = append(bookingBeforeInsertHooks, bookingHook)
		bookingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bookingAfterInsertMu.Lock()
		bookingAfterInsertHooks = append(bookingAfterInsertHooks, bookingHook)
		bookingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bookingBeforeUpdateMu.Lock()
		bookingBeforeUpdateHooks = append(bookingBeforeUpdateHooks, bookingHook)
		bookingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bookingAfterUpdateMu.Lock()
		bookingAfterUpdateHooks = append(bookingAfterUpdateHooks, bookingHook)
		bookingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bookingBeforeDeleteMu.Lock()
		bookingBeforeDeleteHooks = append(bookingBeforeDeleteHooks, bookingHook)
		bookingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bookingAfterDeleteMu.Lock()
		bookingAfterDeleteHooks = append(bookingAfterDeleteHooks, bookingHook)
		bookingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bookingBeforeUpsertMu.Lock()
		bookingBeforeUpsertHooks = append(bookingBeforeUpsertHooks, bookingHook)
		bookingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bookingAfterUpsertMu.Lock()
		bookingAfterUpsertHooks = append(bookingAfterUpsertHooks, bookingHook)
		bookingAfterUpsertMu.Unlock()
	}
}

// One returns a single booking record from the query.
func (q bookingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Booking, error) {
	o := &Booking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for booking")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Booking records from the query.
func (q bookingQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookingSlice, error) {
	var o []*Booking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Booking slice")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Booking records in the query.
func (q bookingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count booking rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if booking exists")
	}

	return count > 0, nil
}

// Availability pointed to by the foreign key.
func (o *Booking) Availability(mods ...qm.QueryMod) availabilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AvailabilityID),
	}

	queryMods = append(queryMods, mods...)

	return Availabilities(queryMods...)
}

// Currency pointed to by the foreign key.
func (o *Booking) Currency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	return Currencies(queryMods...)
}

// Product pointed to by the foreign key.
func (o *Booking) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// BookingUnits retrieves all the booking_unit's BookingUnits with an executor.
func (o *Booking) BookingUnits(mods ...qm.QueryMod) bookingUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"booking_unit\".\"booking_id\"=?", o.ID),
	)

	return BookingUnits(queryMods...)
}

// LoadAvailability allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookingL) LoadAvailability(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooking interface{}, mods queries.Applicator) error {
	var slice []*Booking
	var object *Booking

	if singular {
		var ok bool
		object, ok = maybeBooking.(*Booking)
		if !ok {
			object = new(Booking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBooking))
			}
		}
	} else {
		s, ok := maybeBooking.(*[]*Booking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingR{}
		}
		args[object.AvailabilityID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingR{}
			}

			args[obj.AvailabilityID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`availability`),
		qm.WhereIn(`availability.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Availability")
	}

	var resultSlice []*Availability
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Availability")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for availability")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for availability")
	}

	if len(availabilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Availability = foreign
		if foreign.R == nil {
			foreign.R = &availabilityR{}
		}
		foreign.R.Bookings = append(foreign.R.Bookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AvailabilityID == foreign.ID {
				local.R.Availability = foreign
				if foreign.R == nil {
					foreign.R = &availabilityR{}
				}
				foreign.R.Bookings = append(foreign.R.Bookings, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookingL) LoadCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooking interface{}, mods queries.Applicator) error {
	var slice []*Booking
	var object *Booking

	if singular {
		var ok bool
		object, ok = maybeBooking.(*Booking)
		if !ok {
			object = new(Booking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBooking))
			}
		}
	} else {
		s, ok := maybeBooking.(*[]*Booking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingR{}
		}
		args[object.CurrencyID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingR{}
			}

			args[obj.CurrencyID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`currency`),
		qm.WhereIn(`currency.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Currency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.Bookings = append(foreign.R.Bookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID == foreign.ID {
				local.R.Currency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.Bookings = append(foreign.R.Bookings, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookingL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooking interface{}, mods queries.Applicator) error {
	var slice []*Booking
	var object *Booking

	if singular {
		var ok bool
		object, ok = maybeBooking.(*Booking)
		if !ok {
			object = new(Booking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBooking))
			}
		}
	} else {
		s, ok := maybeBooking.(*[]*Booking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product`),
		qm.WhereIn(`product.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.Bookings = append(foreign.R.Bookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Bookings = append(foreign.R.Bookings, local)
				break
			}
		}
	}

	return nil
}

// LoadBookingUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookingL) LoadBookingUnits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooking interface{}, mods queries.Applicator) error {
	var slice []*Booking
	var object *Booking

	if singular {
		var ok bool
		object, ok = maybeBooking.(*Booking)
		if !ok {
			object = new(Booking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBooking))
			}
		}
	} else {
		s, ok := maybeBooking.(*[]*Booking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`booking_unit`),
		qm.WhereIn(`booking_unit.booking_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load booking_unit")
	}

	var resultSlice []*BookingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice booking_unit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on booking_unit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for booking_unit")
	}

	if len(bookingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BookingUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookingUnitR{}
			}
			foreign.R.Booking = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BookingID {
				local.R.BookingUnits = append(local.R.BookingUnits, foreign)
				if foreign.R == nil {
					foreign.R = &bookingUnitR{}
				}
				foreign.R.Booking = local
				break
			}
		}
	}

	return nil
}

// SetAvailability of the booking to the related item.
// Sets o.R.Availability to related.
// Adds o to related.R.Bookings.
func (o *Booking) SetAvailability(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Availability) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"availability_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AvailabilityID = related.ID
	if o.R == nil {
		o.R = &bookingR{
			Availability: related,
		}
	} else {
		o.R.Availability = related
	}

	if related.R == nil {
		related.R = &availabilityR{
			Bookings: BookingSlice{o},
		}
	} else {
		related.R.Bookings = append(related.R.Bookings, o)
	}

	return nil
}

// SetCurrency of the booking to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.Bookings.
func (o *Booking) SetCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID = related.ID
	if o.R == nil {
		o.R = &bookingR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			Bookings: BookingSlice{o},
		}
	} else {
		related.R.Bookings = append(related.R.Bookings, o)
	}

	return nil
}

// SetProduct of the booking to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.Bookings.
func (o *Booking) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &bookingR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			Bookings: BookingSlice{o},
		}
	} else {
		related.R.Bookings = append(related.R.Bookings, o)
	}

	return nil
}

// AddBookingUnits adds the given related objects to the existing relationships
// of the booking, optionally inserting them as new records.
// Appends related to o.R.BookingUnits.
// Sets related.R.Booking appropriately.
func (o *Booking) AddBookingUnits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BookingUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BookingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"booking_unit\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"booking_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookingUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BookingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bookingR{
			BookingUnits: related,
		}
	} else {
		o.R.BookingUnits = append(o.R.BookingUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookingUnitR{
				Booking: o,
			}
		} else {
			rel.R.Booking = o
		}
	}
	return nil
}

// Bookings retrieves all the records using an executor.
func Bookings(mods ...qm.QueryMod) bookingQuery {
	mods = append(mods, qm.From("\"booking\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"booking\".*"})
	}

	return bookingQuery{q}
}

// FindBooking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooking(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Booking, error) {
	bookingObj := &Booking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"booking\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bookingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from booking")
	}

	if err = bookingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookingObj, err
	}

	return bookingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Booking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no booking provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookingInsertCacheMut.RLock()
	cache, cached := bookingInsertCache[key]
	bookingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"booking\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"booking\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into booking")
	}

	if !cached {
		bookingInsertCacheMut.Lock()
		bookingInsertCache[key] = cache
		bookingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Booking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Booking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookingUpdateCacheMut.RLock()
	cache, cached := bookingUpdateCache[key]
	bookingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update booking, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"booking\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, append(wl, bookingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update booking row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for booking")
	}

	if !cached {
		bookingUpdateCacheMut.Lock()
		bookingUpdateCache[key] = cache
		bookingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for booking")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booking")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Booking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no booking provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookingUpsertCacheMut.RLock()
	cache, cached := bookingUpsertCache[key]
	bookingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert booking, could not build update column list")
		}

		ret := strmangle.SetComplement(bookingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bookingPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert booking, could not build conflict column list")
			}

			conflict = make([]string, len(bookingPrimaryKeyColumns))
			copy(conflict, bookingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"booking\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert booking")
	}

	if !cached {
		bookingUpsertCacheMut.Lock()
		bookingUpsertCache[key] = cache
		bookingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Booking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Booking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Booking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookingPrimaryKeyMapping)
	sql := "DELETE FROM \"booking\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for booking")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for booking")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for booking")
	}

	if len(bookingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Booking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooking(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"booking\".* FROM \"booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookingSlice")
	}

	*o = slice

	return nil
}

// BookingExists checks if the Booking row exists.
func BookingExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"booking\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if booking exists")
	}

	return exists, nil
}

// Exists checks if the Booking row exists.
func (o *Booking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookingExists(ctx, exec, o.ID)
}
